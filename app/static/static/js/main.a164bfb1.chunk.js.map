{"version":3,"sources":["components/Tile.jsx","components/MineSweeper.jsx","components/Menu.jsx","App.js","serviceWorker.js","index.js"],"names":["TileType","UNKNOWN","WATER","BOMB","NUMBER","TileStatus","HIDDEN","REVEALED","Tile","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","gameID","tileIndex","tileRow","tileColumn","tileID","tileType","tileStatus","tileNeighbours","gameOver","winState","killFunction","killGame","revealFunction","revealTile","notifyFunction","notifyOfReveal","interactWithTile","bind","assertThisInitialized","updateTileStatus","disabledIfDead","winGame","externalCall","setState","_this2","fetch","method","mode","headers","Content-Type","body","JSON","stringify","event","then","res","json","result","console","log","error","react_default","a","createElement","index_es","icon","id","className","selectButtonModifiersFromState","disabled","selectImageFromState","onClick","Component","MineSweeper","haveGameData","width","height","hiddenBombs","hiddenBlocks","gameTime","recallGame","increaseRevealedCount","tileRefList","undefined","cleanSweepMatrix","columnCount","rowCount","hiddenBlockCount","buildGame","_this3","length","tileList","forEach","element","i","_this4","sweepTable","rIndex","sweepRow","cIndex","push","key","components_Tile","ref","tileObj","getGameName","Menu","resetGameFunction","reloadGameFunction","hiddenTiles","Fragment","renderGameStatus","library","add","faBomb","faWater","faTimes","faSquare","faQuestion","faQuestionCircle","faClock","faSkull","faTint","faSmile","App","styles","justifyContent","border","top","left","position","transform","resetGame","reloadGame","mainMenu","MS","requestNewGame","match","_ref","style","components_MineSweeper","params","components_Menu","Switch","Route","path","component","Boolean","window","location","hostname","ReactDOM","render","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a164bfb1.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n//Bootstrap\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\n//Awesome Icon Set\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst TileType = {\r\n    UNKNOWN:    'UNKNOWN',\r\n    WATER:      'WATER',\r\n    BOMB:       'BOMB',\r\n    NUMBER:     'NUMBER'\r\n};\r\n\r\nconst TileStatus = {\r\n    HIDDEN:     'HIDDEN',       //Hidden Tile\r\n    REVEALED:   'REVEALED',     //Revealed\r\n}\r\n\r\nclass Tile extends Component {\r\n\r\n    //Tile Object Constructor\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            //GameState elements\r\n            gameID          :   props.gameID,\r\n            tileIndex       :   props.tileIndex,\r\n            tileRow         :   props.tileColumn,\r\n            tileColumn      :   props.tileRow,\r\n            tileID          :   props.tileID,\r\n            tileType        :   TileType.UNKNOWN,\r\n            tileStatus      :   TileStatus.HIDDEN,\r\n            tileNeighbours  :   0,\r\n            gameOver        :   props.gameOver,\r\n            winState        :   false,\r\n\r\n            //Functions\r\n            killFunction    :   props.killGame,         //Calling code on sibling through parent\r\n            revealFunction  :   props.revealTile,       //Call code on parent to request status reveal\r\n            notifyFunction  :   props.notifyOfReveal    //Call Code on parent to notify that we have been revealed\r\n        };\r\n\r\n        //Binding functions\r\n        this.interactWithTile   = this.interactWithTile.bind(this);\r\n        this.updateTileStatus   = this.updateTileStatus.bind(this);\r\n        this.disabledIfDead     = this.disabledIfDead.bind(this);\r\n        this.winGame            = this.winGame.bind(this);\r\n    };\r\n\r\n    //Function called to update the status of a tile\r\n    updateTileStatus(tileType,tileNeighbours,externalCall) {\r\n        //If we already have a revealed status we don't have to update (avoiding loops)\r\n        if (this.state.tileStatus === TileStatus.REVEALED) {\r\n            return;\r\n        }\r\n\r\n        //Updating status and acting based on reveal type\r\n        switch(tileType) {\r\n            case TileType.BOMB:\r\n                this.setState({\r\n                    tileType        :   tileType,\r\n                    tileNeighbours  :   tileNeighbours,\r\n                    tileStatus      :   TileStatus.REVEALED,\r\n                    gameOver        :   true\r\n                });\r\n\r\n                //Killing the game if we haven't won\r\n                if (this.state.winState === false) {\r\n                    this.state.killFunction();\r\n                }\r\n                break;\r\n\r\n            case TileType.WATER:\r\n                this.setState({\r\n                    tileType        :   tileType,\r\n                    tileNeighbours  :   tileNeighbours,\r\n                    tileStatus      :   TileStatus.REVEALED,\r\n                });\r\n                //Calling a reveal as the server should have revealed all the neighbour tiles that are also water\r\n                if (!externalCall) this.state.revealFunction();\r\n                break;\r\n\r\n            default:\r\n                this.setState({\r\n                    tileType        :   tileType,\r\n                    tileNeighbours  :   tileNeighbours,\r\n                    tileStatus      :   TileStatus.REVEALED,\r\n                });\r\n                break;\r\n        }\r\n\r\n        //Notifying parent that we have been revealed\r\n        this.state.notifyFunction();\r\n    }\r\n\r\n    //Callback function used to deal with tiles receiving interaction\r\n    //Previously called for tile to independently update its own status\r\n    //Not being used for the game over state as it requires more requests than a centralized solution\r\n    interactWithTile() {\r\n        //Sending tile reveal request to server\r\n        fetch(\"http://www.modesto.io/minesweeper\",\r\n            {\r\n                method:     'post',\r\n                mode:       'cors', //disabling CORS policy for testing purposes\r\n                headers:    {'Content-Type':'application/json'},\r\n                body:       JSON.stringify({        \r\n                    \"event\"     :   \"move\",\r\n                    \"tileIndex\" :   this.state.tileIndex,\r\n                    \"tileID\"    :   this.state.tileID,\r\n                    \"gameID\"    :   this.state.gameID\r\n                })\r\n            }\r\n        )\r\n        //Parsing json object for response\r\n        .then(res => res.json())\r\n        //Treating json response\r\n        .then(\r\n            //Treating a Valid Result\r\n            (result) => {\r\n                if (result.tileType) {\r\n                    this.updateTileStatus(result.tileType, result.tileNeighbours,false);\r\n                } else {\r\n                    //TODO: Decide whether we should have additional game logic for when we don't get tile info as part of our response.\r\n                    console.log(\"Warning: Responsed does not contain what we want :/\");\r\n                }\r\n            },\r\n            //Treating Errors\r\n            (error) => {\r\n                console.log(\"¯\\\\_(ツ)_/¯ : \"+error);\r\n                //TODO: Do something? I don't know what error cases may occur, so this stays empty for now\r\n            }\r\n        )\r\n    }\r\n\r\n    //Selector that returns the appropriate image depending on the tile status\r\n    selectImageFromState() {\r\n        switch(this.state.tileType) {\r\n            case TileType.UNKNOWN:\r\n                return <FontAwesomeIcon icon=\"question\"/>;\r\n\r\n            case TileType.WATER:\r\n                return <FontAwesomeIcon icon=\"tint\"/>;\r\n\r\n            case TileType.BOMB:\r\n                if (this.state.winState) {\r\n                    return <FontAwesomeIcon icon=\"smile\"/>;\r\n                } else {\r\n                    return <FontAwesomeIcon icon=\"bomb\"/>;\r\n                }\r\n\r\n            case TileType.NUMBER:\r\n                return <span>({this.state.tileNeighbours})</span>;\r\n\r\n            default:\r\n                return <FontAwesomeIcon icon=\"times\"/>;\r\n        }\r\n    }\r\n\r\n    //Selector that returns the correct classes for bootstrap buttons based on tile status\r\n    selectButtonModifiersFromState() {\r\n        switch(this.state.tileType) {\r\n            case TileType.UNKNOWN:\r\n                return \"btn btn-outline\";\r\n\r\n            case TileType.WATER:\r\n                return \"btn btn-outline-primary disabled\";\r\n\r\n            case TileType.BOMB:\r\n                if (this.state.winState) {\r\n                    return \"btn btn-outline-warning disabled\";\r\n                } else {\r\n                    return \"btn btn-outline-danger disabled\";\r\n                }\r\n\r\n            case TileType.NUMBER:\r\n                return \"btn btn-outline-success disabled\";\r\n\r\n            default:\r\n                return \"btn btn-outline-warning disabled\";\r\n        }\r\n    }\r\n\r\n    //Adds a disabled state if the tile has already been target of interaction\r\n    disabledIfDead() {\r\n        if (this.state.gameOver) {\r\n            return \"disabled\";\r\n        }\r\n        return;\r\n    }\r\n\r\n    //Function called when we win game to switch parameters and display bombs\r\n    winGame() {\r\n        this.setState({\r\n            winState : true\r\n        })\r\n\r\n        //Converting Bomb Tiles :)\r\n        if (this.state.tileStatus === TileStatus.HIDDEN) {\r\n            this.updateTileStatus(TileType.BOMB,0,true);\r\n        }\r\n    }\r\n\r\n    //Render\r\n    render() {\r\n        //Filtering Button interaction based on tile reveal status\r\n        if (this.state.tileStatus === TileStatus.REVEALED) {\r\n            return (\r\n                <div>\r\n                    <button id={this.state.tileID} className={this.selectButtonModifiersFromState()} disabled>\r\n                        {this.selectImageFromState()}\r\n                    </button>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <button id={this.state.tileID} className={this.selectButtonModifiersFromState()} onClick={this.interactWithTile}>\r\n                        {this.selectImageFromState()}\r\n                    </button>\r\n                </div>\r\n            );\r\n        }\r\n    };\r\n}\r\n \r\nexport default Tile;","import React, { Component } from 'react';\r\nimport Tile from './Tile.jsx';\r\n\r\nclass MineSweeper extends Component {\r\n    //App Object Constructor\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { \r\n            gameID          : \"\",       //ID of game currently being played\r\n            haveGameData    : false,    //Boolean that defines whether we got a game status from the server\r\n            width           : 0,        //Column Count\r\n            height          : 0,        //Row Count\r\n            hiddenBombs     : 0,        //Number of bombs in game\r\n            hiddenBlocks    : 0,        //Number of hidden Blocks in Game\r\n            gameTime        : 0,        //Time since game start\r\n            gameOver        : false,    //True if the game is over (not started or lost)\r\n            winState        : false,    //True if the last action was a winning move (only bombs hidden)\r\n        };\r\n\r\n        //Binding the game ended by bomb function callback\r\n        this.killGame = this.killGame.bind(this);\r\n\r\n        //Binding the tile reveal request callback\r\n        this.recallGame = this.recallGame.bind(this);\r\n\r\n        //Binding the tile reveal notification callback\r\n        this.increaseRevealedCount = this.increaseRevealedCount.bind(this);\r\n\r\n        //Creating the Ref list for our tiles\r\n        this.tileRefList = [];\r\n\r\n\r\n        //If we have a game from the get go we'll\r\n        if (props.gameID !== \"\" && props.gameID !== undefined) {\r\n            this.state.gameID = props.gameID;\r\n            this.state.gameOver = false;\r\n            this.recallGame();\r\n        }\r\n    };\r\n\r\n    //Function called to end game (called if a tile selected is a bomb #RIP)\r\n    killGame() {\r\n        //Getting updated status of game\r\n        this.recallGame();\r\n\r\n        //Ignoring potentially repeated game over requests\r\n        if (this.state.gameOver === true) return;\r\n\r\n        //Player is now dead. Congrats to player\r\n        this.setState({\r\n            gameOver    :   true,\r\n            winState    :   false\r\n        });\r\n    }\r\n\r\n    //Function called to request a new game from the server\r\n    requestNewGame() {\r\n        //Reseting game status\r\n        this.cleanSweepMatrix();\r\n\r\n        //Starting async game request\r\n        fetch(\"http://www.modesto.io/minesweeper\",\r\n            {\r\n                method  :   'post',\r\n                mode    :   'cors', //disabling CORS policy for testing purposes\r\n                headers :   {'Content-Type':'application/json'},\r\n                body    :   JSON.stringify({\r\n                    \"event\" :   \"newgame\"\r\n                })\r\n            }\r\n        )\r\n        .then(res => res.json())\r\n        .then(\r\n            //Treating a Valid Result\r\n            (result) => {\r\n                console.log(\"Got Result!\");\r\n                this.setState({\r\n                    haveGameData    : true,\r\n                    width           : result.columnCount,\r\n                    height          : result.rowCount,\r\n                    hiddenBombs     : result.hiddenBlockCount,\r\n                    hiddenBlocks    : result.columnCount * result.rowCount,\r\n                    gameID          : result.gameID,\r\n                    gameOver        : false\r\n                })\r\n                this.buildGame()\r\n            },\r\n            //Treating Errors\r\n            (error) => {\r\n                //console.log(\"No new game I guess ¯\\\\_(ツ)_/¯\");\r\n                //TODO: Do something? I don't know what error cases may occur, so this stays empty for now\r\n            }\r\n        )\r\n    }\r\n\r\n    //Function resposible for state cleanup, called to change state whenever we want to empty our board\r\n    cleanSweepMatrix() {\r\n        //\"Cleaning\" the game state\r\n        this.setState({\r\n            gameID          : \"\",\r\n            haveGameData    : false,\r\n            width           : 0,\r\n            height          : 0,\r\n            gameTime        : 0,\r\n            gameOver        : true\r\n        })\r\n    }\r\n\r\n    //Function called to refresh game status\r\n    recallGame() {\r\n        if (this.state.gameOver === true) return;\r\n\r\n        console.log(\"Treating Recall Event\");\r\n\r\n        //Sending a game recall to server to reveal the portion of the board we know\r\n        //Can be the whole board if we've gotten a GAME OVER\r\n        fetch(\"http://www.modesto.io/minesweeper\",\r\n            {\r\n                method:     'post',\r\n                mode:       'cors', //disabling CORS policy for testing purposes\r\n                headers:    {'Content-Type':'application/json'},\r\n                body:       JSON.stringify({        \r\n                    \"event\"     :   \"recall\",\r\n                    \"gameID\"    :   this.state.gameID\r\n                })\r\n            }\r\n        )\r\n        //Parsing json object for response\r\n        .then(res => res.json())\r\n        //Treating json response\r\n        .then(\r\n            //Treating a Valid Result\r\n            (result) => {\r\n\r\n                //Checking if our board is already built or if we're recalling a game from another session\r\n                //If not, we'll update our state and pre-build an empty board\r\n                if (this.tileRefList.length === 0) {\r\n                    this.setState({\r\n                        haveGameData    :   true,\r\n                        width           :   result.columnCount,\r\n                        height          :   result.rowCount,\r\n                        hiddenBombs     :   result.hiddenBlockCount,\r\n                        hiddenBlocks    :   result.columnCount * result.rowCount,\r\n                        gameID          :   result.gameID,\r\n                        gameOver        :   false,\r\n                        winState        :   false\r\n                    })\r\n                    this.buildGame();\r\n                }\r\n\r\n                //\r\n                if (result.tileList) {\r\n                    //processing and updating \r\n                    //var tileList = JSON.parse(result.tileList);\r\n                    var tileList = result.tileList;\r\n\r\n                    //For each element in our response file, we'll search for the corresponding tile\r\n                    //And update the tile position\r\n                    tileList.forEach(element => {\r\n                        for (var i = 0; i < this.tileRefList.length ; i++) {\r\n                            if (this.tileRefList[i] != null && this.tileRefList[i].state.tileIndex === element.tileIndex) {\r\n                                this.tileRefList[i].updateTileStatus(element.tileType, element.tileNeighbours,true);\r\n                            }\r\n                        }\r\n                    });\r\n                } else {\r\n                    //console.log(\"Warning: Responsed does not contain what we want :/\");\r\n                    //TODO: Decide whether there should be game logic for when a server does not reply with tile data\r\n                }\r\n            },\r\n            //Treating Errors\r\n            (error) => {\r\n                //TODO: Do something? I don't know what error cases may occur, so this stays empty for now\r\n            }\r\n        )\r\n    }\r\n\r\n    //Function called to increase the number of revealed tiles\r\n    increaseRevealedCount() {\r\n        this.setState({\r\n            hiddenBlocks    :   this.state.hiddenBlocks - 1\r\n        })\r\n\r\n        //Iterating over tiles to win game\r\n        if (this.state.hiddenBlocks <= this.state.hiddenBombs && this.state.gameOver === false) {\r\n            this.setState({\r\n                gameOver    :   true,\r\n                winState    :   true\r\n            })\r\n            for (var i = 0; i < this.tileRefList.length ; i++) {\r\n                if (this.tileRefList[i] != null) this.tileRefList[i].winGame();\r\n            }\r\n        }\r\n    }\r\n\r\n    // Function called to build the game based on current state\r\n    buildGame() {\r\n        if (!this.state.haveGameData) {\r\n            return <div>No Ongoing Game :)</div>\r\n        }\r\n        let sweepTable = [];\r\n\r\n        //Iterating over rows to construct Matrix that represents the current state of the minesweeper game\r\n        for (var rIndex = 0; rIndex < this.state.height ; rIndex++) {\r\n            let sweepRow = [];  //Row of elements in the MineSweeper\r\n            //Creating columns in said row\r\n            for (var cIndex  = 0; cIndex < this.state.width ; cIndex++) {\r\n                var tileIndex = (rIndex*this.state.width + cIndex)\r\n                var tileID = this.state.gameID+\"_tile_\"+tileIndex\r\n                            \r\n                //Pushing element to our array\r\n                sweepRow.push(\r\n                    <td key={tileID}>\r\n                        <Tile\r\n                            tileIndex={tileIndex}\r\n                            tileRow={rIndex}\r\n                            tileColumn={cIndex}\r\n                            tileID={tileID}\r\n                            gameID={this.state.gameID}\r\n                            killGame={this.killGame}\r\n                            gameOver={this.state.gameOver}\r\n                            revealTile={this.recallGame}\r\n                            notifyOfReveal={this.increaseRevealedCount}\r\n                            ref={(tileObj) => this.tileRefList.push(tileObj)}\r\n                        />\r\n                    </td>\r\n                );\r\n            }\r\n\r\n            //Adding current Row to Table\r\n            sweepTable.push(<tr key={\"row_\" + rIndex}>{sweepRow}</tr>);\r\n        }\r\n\r\n        //Returning the table that contains our game\r\n        return <table className=\"borderless\"><tbody>{sweepTable}</tbody></table>;\r\n    }\r\n    \r\n    getGameName() {\r\n        if (this.state.gameID === \"\") return;\r\n        return (<p>Game ID: {this.state.gameID}</p>);\r\n    }\r\n\r\n    //Render\r\n    render() { \r\n        return ( \r\n            <div>\r\n                {this.getGameName()}\r\n                <br/>\r\n                {this.buildGame()}\r\n            </div>\r\n        );\r\n    };\r\n}\r\n \r\nexport default MineSweeper;","import React, { Component } from 'react';\r\n\r\n//Bootstrap\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nclass Menu extends Component {\r\n    //Tile Object Constructor\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            gameOver            :   true,\r\n            resetGameFunction   :   props.resetGameFunction,    //Used to call Reset code on sibling through parent\r\n            reloadGameFunction  :   props.reloadGameFunction,   //Used to call Reload code on sibling through parent\r\n            hiddenTiles         :   0\r\n        };\r\n    };\r\n\r\n    renderGameStatus() {\r\n        if (this.state.gameOver === true) return;\r\n    }\r\n\r\n    //Render\r\n    render() {\r\n        \r\n\r\n        return (\r\n            <React.Fragment>\r\n                <button id=\"startButton\" className=\"btn btn-outline-primary btn-sm\" onClick={this.state.resetGameFunction}> New Game </button>\r\n                {this.renderGameStatus()}\r\n            </React.Fragment>\r\n            //Button for game sharing (requires reworking of the Minesweeper Components' Game State to allow hot start (ongoing game load))\r\n            //<button id=\"startButton\" className=\"btn btn-outline-primary btn-sm\" onClick={this.state.reloadGameFunction}> Load Current Game </button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Menu;","import React, { Component } from 'react';\nimport { Route, Switch  } from 'react-router-dom';\nimport './App.css';\nimport './components/MineSweeper.jsx';\nimport MineSweeper from './components/MineSweeper.jsx';\nimport Menu from './components/Menu.jsx';\n\n//Importing Fontawesome Icon Set\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faBomb, faWater, faTimes, faSquare, faQuestion, faQuestionCircle, faClock, faSkull, faTint, faSmile } from '@fortawesome/free-solid-svg-icons'\n\n//Adding the icons we'll use to our library\nlibrary.add(faBomb, faWater, faTimes, faSquare, faQuestion, faQuestionCircle, faClock, faSkull, faTint, faSmile);\n\n//Main App :)\nclass App extends Component {\n\n  //App Object Constructor\n  constructor(props) {\n    super(props);\n\n    //Binding button function callbacks\n    this.resetGame = this.resetGame.bind(this);\n    this.reloadGame = this.reloadGame.bind(this);\n    this.mainMenu = this.mainMenu.bind(this);\n  };\n\n  styles = {\n    justifyContent: 'center',\n    border: 'none',\n    top :\"50%\",\n    left:\"50%\",\n    position:\"absolute\",\n    transform: \"translate(-50%, -50%)\"\n  };\n\n  //Sibling to Sibling hook for Game Reset\n  //(called by Menu Component to operate on MineSweeper component)\n  resetGame() {\n    this.MS.requestNewGame();\n  }\n\n  //Sibling to Sibling hook for Game Reload\n  //(called by Menu Component to operate on MineSweeper component)\n  reloadGame() {\n    this.MS.recallGame();\n  }\n\n  mainMenu({ match }) {\n    //console.log(\"do we have a match? \"+match.params.gameID)\n    return(\n    <div className=\"App\">\n      <div className=\"row col-md-push-4\">\n          <div className=\"table-responsive-sm\" style={this.styles} >\n            <MineSweeper \n              gameID={match.params.gameID} \n              ref={MS => {\n                this.MS = MS;\n              }}\n            />\n            <br/>\n            <Menu resetGameFunction={this.resetGame} reloadGameFunction={this.reloadGame}/>\n          </div>\n      </div>\n    </div>\n    );\n  };\n\n  //Render\n  render() {\n    return(\n      <div>\n        <Switch>\n          <Route path=\"/:gameID\" component={this.mainMenu}/>\n          <Route path=\"\" component={this.mainMenu}/>\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}